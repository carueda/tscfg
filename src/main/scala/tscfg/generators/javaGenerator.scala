package tscfg.generators

import java.io.PrintWriter
import java.util.Date

import tscfg.javaUtil
import tscfg.generator._
import tscfg.specs._

object javaGenerator {

  def generate(objSpec: ObjSpec, out: PrintWriter)
              (implicit genOpts: GenOpts): GenResult = {

    out.println(s"// generated by tscfg $version on ${new Date()}")
    genOpts.preamble foreach { p =>
      out.println(s"// ${p.replace("\n", "\n// ")}\n")
    }
    out.println(s"package ${genOpts.packageName};\n")

    var results = GenResult()

    // main class:
    genObjSpec(genOpts.className, objSpec, "")

    def genObjSpec(name: String, objSpec: ObjSpec, indent: String): Unit = {
      // <class>
      val className = genOpts.className
      results = results.copy(classNames = results.classNames + className)

      out.println(indent + s"public $className {")

      // generate for members:
      val orderedNames = objSpec.children.keys.toList.sorted
      orderedNames foreach { name => gen(name, objSpec.children(name), indent + "  ") }

      out.println(indent + "}")
      // </class>
    }

    def genAtomicSpec(name: String, spec: AtomicSpec, indent: String): Unit = {
      out.println(indent + spec.typ + " " + name + ";")
    }

    def genListSpec(name: String, listSpec: ListSpec, indent: String): Unit = {
      out.println(indent + "LIST" + " " + name + " OF " + gen("<list>", listSpec.elemSpec, indent + "  "))
    }

    def genOptionalSpec(name: String, optSpec: OptionalSpec, indent: String): Unit = {

    }

    def gen(name: String, spec: Spec, indent: String = ""): Unit = spec match {
      case spec: AtomicSpec    ⇒ genAtomicSpec(name, spec, indent)
      case spec: ObjSpec       ⇒ genObjSpec(name, spec, indent)
      case spec: ListSpec      ⇒ genListSpec(name, spec, indent)
      case spec: OptionalSpec  ⇒ genOptionalSpec(name, spec, indent)

    }

    results
  }
}
