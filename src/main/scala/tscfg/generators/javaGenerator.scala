package tscfg.generators

import java.util.Date

import tscfg.javaUtil._
import tscfg.generator._
import tscfg.specs._

object javaGenerator {

  def generate(objSpec: ObjSpec)
              (implicit genOpts: GenOpts): GenResult = {

    var results = GenResult()

    def genObjSpec(name: String, objSpec: ObjSpec, indent: String, root: Boolean = false): Code = {
      // <class>
      val className = getClassName(name)
      results = results.copy(classNames = results.classNames + className)

      val staticStr = if (root) "" else " static"
      val elemCode = Code(className,
        indent + s"public$staticStr class $className {\n")

      // generate for members:
      val orderedNames = objSpec.children.keys.toList.sorted
      orderedNames foreach { name =>
        val cec = gen(name, objSpec.children(name), indent + IND)
        elemCode.println(cec.javaCode)
      }

      elemCode.println(indent + "}")
      // </class>

      elemCode.newClass = true
      elemCode
    }

    def genAtomicSpec(name: String, spec: AtomicSpec, indent: String): Code = {
      val javaType = getJavaType(spec.typ)
      Code(javaType, indent + "public final " + javaType + " " + name + ";")
    }

    def genListSpec(name: String, listSpec: ListSpec, indent: String): Code = {
      val elemCode = gen(name + "Element", listSpec.elemSpec, indent)
      val objType = toObjectType(elemCode.javaType)
      val javaType = s"java.util.List<$objType>"
      val code = Code(javaType)

      if (elemCode.newClass)
        code.println(elemCode.javaCode)

      code.println(indent + "public final " + javaType + " " + name + ";")
      code
    }

    def gen(name: String, spec: Spec, indent: String = ""): Code = spec match {
      case spec: AtomicSpec    ⇒ genAtomicSpec(name, spec, indent)
      case spec: ObjSpec       ⇒ genObjSpec(name, spec, indent)
      case spec: ListSpec      ⇒ genListSpec(name, spec, indent)
    }

    val header = new StringBuilder()
    header.append(s"// generated by tscfg $version on ${new Date()}\n")
//    genOpts.preamble foreach { p =>
//      header.append(s"// ${p.replace("\n", "\n// ")}\n\n")
//    }
    header.append(s"package ${genOpts.packageName};\n\n")

    // main class:
    val elemSpec = genObjSpec(genOpts.className, objSpec, "", root = true)

    results = results.copy(code = header.toString() + elemSpec.javaCode)

    results
  }

  case class Code(javaType: String, initialCode: String = "") {
    def println(str: String): Unit = code.append(str).append('\n')

    def print(str: String): Unit = code.append(str)

    def javaCode = code.toString

    var newClass: Boolean = false

    private val code = new StringBuilder(initialCode)
  }

  private val IND = "    "
}
